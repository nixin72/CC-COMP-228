////////////////////////////////////////////////////////////////////////////////
///////////////////               QUESTION 2               /////////////////////
////////////////////////////////////////////////////////////////////////////////
				ORG			000			/ START ADDRESSING AT MEMORY LOCATION 0
				JnS  		main		/ Start main method
                Store 		exitCode	/ Store output of main as exitCode
                Jump 		exit		/ Jump to exit.

/ Input: none
/ Output: Return value that's sent as the exit code to the program
main,			HEX			A00
				Load 		addr		/ First memory address for string
				Store 		pNext1		/ Set it as parameter for PRINT
				JnS			printf		/ Jump into PRINT subroutine
                Load 		eight		/ Load value 8
				Store 		pX			/ Set it as parameter for func1
				JnS 		func1		/ Jump into func1 subroutine
                Load 		zero		/ Load 0 as exit code
				JumpI  		main		/ return 0 from main

/ Input: None
/ Output: void
func1,			Clear					/ Clear the accumulator
                Load 		addr2		/ Load starting address of Y
                Store 		pNext3		/ Store it as the parameter to scanf
                JnS			scanf		/ Jump into scanf subroutine
                Load 		addr2
				Store 		pNext2
				JnS			strlen
                Subt 		pX
                Skipcond 	400
                JumpI 		func1
                Load 		one
                Store 		exitCode
                Jump		exit

/ Input:
/ 	pNext1 - The starting mem addr of the string
/ Output: void
printf,			Clear
LOOP1,			Clear
				AddI 		pNext1		/ Load next value into acc
				Subt 		nullTerm	/ subtract the null terminator code
				Skipcond 	400			/ Will only be 0 if the character is \
				Jump 		LBODY1		/ If not \, continue to body of loop
				JumpI 		printf		/ Otherwise, break from loop
LBODY1,			Clear
				AddI 		pNext1		/ Load the memory address into acc
				Output					/ Print the character
				Load 		pNext1		/ Load the next memory address
				Add 		one			/ Increment the address
                Store 		pNext1		/ Store it in the next address pointer
				Jump 		LOOP1		/ Go back to beginning of loop

/ Input:
/ 	pNext2 - the starting mem addr of the string
/ Output: the length of the string
/ NOTE:
/ 	The null terminator is not included as the length of the string.
/ 	If someone enters "password" then length will be 8
/ 	Even though the string is *stored* as "password\"
strlen,			Clear
LOOP2,			Clear
				AddI		pNext2		/ Load the value at starting address
				Subt 		nullTerm	/ Subtract null terminator
				Skipcond 	400			/ Check if this was null terminator
                Jump 		LBODY2		/ If not, Jump to body
                Load 		lLen		/ Reload the length of the string
				Store 		returnAddr	/ Store it as return address
                JumpI 		strlen		/ If nullterm, return from strlen
LBODY2,			Clear					/ Set acc to 0
				Load  		pNext2		/ Set acc to the current mem addr
				Add 		one			/ Move to the next mem addr
                Store 		pNext2		/ Store it back
                Load 		lLen		/ Load the output length
				Add 		one			/ Add 1 to the length
                Store 		lLen		/ Store the length
				Jump 		LOOP2       / Continue looping over characters

/ Input: The memory address of the variable to input into
/ Output: void
scanf,			Clear
DOWHILE1,		Input					/ Prompt user for input.
				Store 		lInput		/ Store the input
				StoreI 		pNext3		/ Store the input at the next mem addr
                Load 		pNext3		/ Load the mem addr for curr input
				Add 		one			/ Add one for next input addr
                Store		pNext3		/ Store it as next mem addr
				Load 		lInput		/ Load the user's input
				Subt 		nullTerm	/ subtract null terminator's value
				Skipcond 	400			/ Check if it's a null terminator
                Jump 		DOWHILE1	/ Continue to the body if it is
                JumpI		scanf		/ Exit subroutine

/ Input:
/ 	exitCode - The exit code for the program. 0: pass, 1: fail (POSIX standard)
/ Output: N/A, kills the program
exit,			Clear
				Load  		addr3		/ Start a newline
				Store 		pNext1
				JnS			printf
				Load 		exitCode    / Load the exit code from memory
				Skipcond 	400
                Jump  		THEN1		/ Jump to exit okay
				Jump 		ELSE1		/ Jump to exit error
THEN1,			Load 		uniZero		/ Load 0 (success) as exit code
				Output
				Halt
ELSE1,			Load 		uniOne		/ Load 1 (error) as output code
				Output
				Halt

////////////////////////////////////////////////////////////////////////////////
////////////////////              DECLARATIONS              ////////////////////
////////////////////////////////////////////////////////////////////////////////
/ Constants
uniZero,		HEX			30
uniOne,			HEX			31
zero,			DEC			0
one,			DEC			1
eight,			DEC			8
newline,		HEX			0a

nullTerm,		HEX			5C 			/ Null termination character is "\"
returnAddr,		HEX			A00			/ Address to send return values to

/ main's variables.
addr, 			HEX			5B			/ Starting Address
prompt,			HEX			45 			/ E
				HEX			6E			/ n
				HEX			74			/ t
				HEX			65			/ e
				HEX			72			/ r
				HEX			20
                HEX			61			/ a
				HEX			20
				HEX			70			/ p
				HEX			61			/ a
				HEX			73			/ s
				HEX			73			/ s
				HEX			70			/ p
				HEX			68			/ h
				HEX			72			/ r
				HEX			61			/ a
				HEX			73			/ s
				HEX			65			/ e
				HEX			3A			/ :
				HEX			0a
				HEX			28			/ (
				HEX			55			/ U
				HEX			73			/ s
				HEX			65			/ e
				HEX			20
				HEX			22			/ "
				HEX			20E5		/ \
				HEX			22			/ "
				HEX			20
				HEX			61			/ a
				HEX			73			/ s
				HEX			20
				HEX			6e			/ n
				HEX			75			/ u
				HEX			6c			/ l
				HEX			6c			/ l
				HEX			20
				HEX			74			/ t
				HEX			65			/ e
				HEX			72			/ r
				HEX			6d			/ m
				HEX			69			/ i
				HEX			6e			/ n
				HEX			61			/ a
				HEX			74			/ t
				HEX			6f			/ o
				HEX			72			/ r
				HEX			29			/ )
                // Will test later with null termination
                HEX			5C			/ NULL termination

/ func1 variables
pX,				DEC			0			/ Param: size of password allowed
addr2,			HEX			8E			/ starting mem addr of lY
lY,				DEC			0			/ Local variable Y
				DEC			0
                DEC			0
                DEC			0
                DEC			0
                DEC			0
                DEC			0
                DEC			0
                DEC			0

/ printf's variables
pNext1,			DEC			0			/ Param: first mem addr of string
pLen,			DEC			0 			/ param: Length of string

/ scanf variables
pNext3,			DEC			0			/ Param: starting address to store into
lInput,			DEC			0			/ Local: The user's current input

/ strlen variables
pNext2,			DEC			0			/ The starting address of the string
lLen,			DEC			0			/ The outputed length

/ Exit
exitCode,		DEC			0 			/ Param: 0 - success, else - fail
addr3,			HEX			9F
exitMsg,		HEX			A			/ New line
				HEX			45			/ E
				HEX			78			/ x
				HEX			69			/ i
				HEX			74			/ t
				HEX			20
				HEX			63			/ c
				HEX			6f			/ o
				HEX			64			/ d
				HEX			65			/ e
				HEX			3a			/ :
				HEX			20
HEX 5C / \
